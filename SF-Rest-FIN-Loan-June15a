//FRIDAY  Mortgage demo using REST calls with enhanced Application data StringCut
//Dan Harrison's working version
//Still need to add feedback from ETH to Salesforce via Get
//OFS DApp not updating status

pragma solidity 0.4.21;

// Define the interface from the OFS REST DApp
// For this demo we are only use the read function for now
interface sfREST {
//    function write(string key, string value) external;
function executeFunction(string functionName, string key, string value) external;
function read(string key) external view returns (string, string, uint, uint, string);

}

//============================================================================
// Modification of LoanProgram to include REST-read function

contract LoanProgram is sfREST {

    event ApplicationCreated(address contractAddress);
    string public name;
    struct  LOV {
        string  key;
        string  value;
        uint createdDate;
        uint updatedDate;
        string status;
    }
    string public aST1;
    string public aST2;
    string public aTown;
    string public aZIP;
    string public aState;
    string public aCNT;
    string public aSex;
    string public aDOB;
    string public aSSN;
    string public aIncome;
	string public aAmount;
    string public aDur;
    int public iZIP;
    int public iSSN;
    int public iIncome;
    int public iDur;
	int public iAmount;

    string splitVar;

    mapping (string => LOV) private loanAppAddress;

    function LoanProgram() public {

        name = "Add-On Demo Loan Program";
    }

    function apply(address _applicant, string _loanType, int _loanAmount, int _loanPeriodInYears) public {

        address newContract = new Loan(name, _applicant, _loanType, _loanAmount, _loanPeriodInYears);
        emit ApplicationCreated(newContract);
    }

    // This READ function from the REST DApp call will generate an Application and Mortgage Loan
    // The returned Addresses should be used to see the loan in the Mortgage DApp

    function executeFunction(string loanType, string applicantName, string dummy) external {

	//Salesforce will pass in a string like this (keeping it simple to parse):
	//          ZIP     SEX       DOB          SSN         INCOME  Duration LoanAmount
	//0123456789012345678901234567890123456789012345678901234567890123456789012345
	//{"00":"05~94105~01~M~10~1976-06-03~09~333222111~06~350000~02~22~06~766000~"}
	aSex = substring(dummy,19,20);
    aDOB = substring(dummy,24,34);	
    aZIP = substring(dummy,10,15);			iZIP = int(stringToUint(aZIP));
    aSSN = substring(dummy,38,47);			iSSN = int(stringToUint(aSSN));
    aIncome = substring(dummy,51,57);		iIncome = int(stringToUint(aIncome));
	aDur = substring(dummy,61,63);			iDur = int(stringToUint(aDur));
	aAmount = substring(dummy,67,73);		iAmount = int(stringToUint(aAmount));

	//Because of the limitation of variables, just create the Application
        Applicant newAppl = new Applicant(applicantName, "M",  "Oct27",
                                           "aST1",  "aST2", "Town", "2345", "ON", "canda",
                                           777888333,
                                           56000);
                      
                                           
    //Now update the address and since only ZIP is displayed it is the only one that matters            
    	newAppl.AppAddress("12 Main", "App 24", "Toronto", aZIP, "CA", "USA");
        
    //Then update the Profile ... but SSN is really displaying ZIP so pass it
        //                 aSex, aDOB,  SSN(ZIP)  Income
        newAppl.AppProfile(aSex, aDOB, iZIP, iIncome);
        
                                           
     emit ApplicationCreated(newAppl);
     
     //Use the new Applicant to create the Loan record
     //                               name, Applicant, Type, Amount, Period
        address newLoan = new Loan("loanName", newAppl, loanType, iAmount, iDur);


		//Now return the two addresses that will be used to access the entry via DApp UI
    loanAppAddress[applicantName] = LOV({
        key: applicantName,
        value: toAsciiString(newLoan),
        createdDate: now,
        updatedDate: now,
        status:"ACTIVE"
    });


    }

    function read(string key) external view returns (string, string, uint, uint, string) {

        LOV storage lov = loanAppAddress[key];
        return (lov.key, lov.value, lov.createdDate, lov.updatedDate, lov.status);
    }


//=========================== Utility Methods - not all Used ============================================
//=========================== but all are from Google search ============================================
    function compareStrings (string a, string b) internal pure  returns (bool) {

        return keccak256(a) == keccak256(b);
    }

	function address2String(address x) internal pure returns (string) {
	    bytes memory b = new bytes(20);
	    for (uint i = 0; i < 20; i++)
	        b[i] = byte(uint8(uint(x) / (2**(8*(19 - i)))));
    	return "123";   //string(b);
	}

	function toAsciiString(address x) internal pure returns (string) {
	    bytes memory s = new bytes(40);
	    for (uint i = 0; i < 20; i++) {
	        byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));
	        byte hi = byte(uint8(b) / 16);
	        byte lo = byte(uint8(b) - 16 * uint8(hi));
	        s[2*i] = char(hi);
	        s[2*i+1] = char(lo);
	    }
	    return string(s);
	}

	function char(byte b) internal pure returns (byte) {
    	if (b < 10) return byte(uint8(b) + 0x30);
    	else return byte(uint8(b) + 0x57);
	}

function stringToUint(string s) constant returns (uint result) {
        bytes memory b = bytes(s);
        uint i;
        result = 0;
        for (i = 0; i < b.length; i++) {
            uint c = uint(b[i]);
            if (c >= 48 && c <= 57) {
                result = result * 10 + (c - 48);
            }
        }
    }

function substring(string str, uint startIndex, uint endIndex) constant returns (string) {
    bytes memory strBytes = bytes(str);
    bytes memory result = new bytes(endIndex-startIndex);
    for(uint i = startIndex; i < endIndex; i++) {
        result[i-startIndex] = strBytes[i];
    }
    return string(result);
}

 function splitStr(string str, string delimiter) public returns (string ){ 
//delimiter can be any character that separates the string 
        bytes tempNum ;
        bytes memory b = bytes(str); //cast the string to bytes to iterate
        bytes memory delm = bytes(delimiter); 
                splitVar = str;       
      for(uint i; i<b.length ; i++){          

            if(b[i] != delm[0]) {   //check if a not the delimiter
                tempNum.push(b[i]);             
            }
            else { 
                //numbers.push(parseInt(string(tempNum))); 
                //tempNum = "";   //reset the tempNum to catch the net number  
                splitVar = delimiter;               
            }                
        }

        return splitVar;
    
}

//    function split(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {
//return selflen;
//}
//    function split2(string self, string needle, string token) public returns (string) {
//        return token;
//    }

    // Returns the memory address of the first byte of the first occurrence of
    // `needle` in `self`, or the first byte after `self` if not found.
    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {
        uint ptr = selfptr;
        uint idx;

        if (needlelen <= selflen) {
            if (needlelen <= 32) {
                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));

                bytes32 needledata;
                assembly { needledata := and(mload(needleptr), mask) }

                uint end = selfptr + selflen - needlelen;
                bytes32 ptrdata;
                assembly { ptrdata := and(mload(ptr), mask) }

                while (ptrdata != needledata) {
                    if (ptr >= end)
                        return selfptr + selflen;
                    ptr++;
                    assembly { ptrdata := and(mload(ptr), mask) }
                }
                return ptr;
            } else {
                // For long needles, use hashing
                bytes32 hash;
                assembly { hash := sha3(needleptr, needlelen) }

                for (idx = 0; idx <= selflen - needlelen; idx++) {
                    bytes32 testHash;
                    assembly { testHash := sha3(ptr, needlelen) }
                    if (hash == testHash)
                        return ptr;
                    ptr += 1;
                }
            }
        }
        return selfptr + selflen;
    }



}

//=========================== Ened Utility Methods ============================================


//============================================================================  APPLICANT
contract Applicant {

    struct  ApplicantAddress {
        string  street1;
        string  street2;
        string  city;
        string  zip;
        string  state;
        string  country;
    }

    struct Application {
        string lenderName;
        address lenderAddress;
        bool active;
        uint appliedDate;
    }

	string public storeIT;
    string private applicantName;
    string private applicantSex;
    string  private applicantDOB;
    ApplicantAddress private homeAdd;
    int private ssn;
    int private applicantIncome;
    address private signedBy;
    mapping (address => Application) public applicationDetails;
    event ApplicationAcknowledged(address from);
    event PersonalInfoRead(address from);
    address[] public myApplications;

    modifier lenderCallOnly() {
        if (!applicationDetails[msg.sender].active) {
            revert();
        } else {
            _;
        }
    }

    function Applicant(string _applicantName,
                        string _applicantSex,
                        string _applicantDOB,
                        string _street1,
                        string _street2,
                        string _city,
                        string _zip,
                        string _state,
                        string _country,
                        int _ssn,
                        int _applicantIncome) public {

        applicantName = _applicantName;
        applicantSex = _applicantSex;
        applicantDOB = _applicantDOB;
        homeAdd = ApplicantAddress(_street1, _street2, _city, _zip, _state, _country);
        ssn = _ssn;
        applicantIncome = _applicantIncome;
        signedBy = msg.sender;
    }
    function AppProfile(string _applicantSex,
                        string _applicantDOB,
                        int _ssn,
                        int _applicantIncome) public {
        applicantSex = _applicantSex;
        applicantDOB = _applicantDOB;
        ssn = _ssn;
        applicantIncome = _applicantIncome;
    }

    function AppAddress(string _street1,
                        string _street2,
                        string _city,
                        string _zip,
                        string _state,
                        string _country) public {
        homeAdd.street1 = _street1;
        homeAdd.street2 = _street2;
        homeAdd.city = _city;
        homeAdd.zip = _zip;
        homeAdd.state = _state;
        homeAdd.country = _country;
    }


    function findBySSN(int _ssn) public view returns (bool) {
        if (ssn == _ssn) {
            return true;
        }
        return false;
    }

    function ackApplication(string _name, address _lenderAddress) public {

        applicationDetails[msg.sender] = Application(_name, _lenderAddress, true, now);
        emit ApplicationAcknowledged(msg.sender);
        myApplications.push(msg.sender);
    }

       //add modified lenderCallOnly to restrict access ONLY to lender
    function getApplicantDetails() public view  returns(string, string, string, int, int, address) {
        return (applicantName, applicantSex, applicantDOB, ssn, applicantIncome, signedBy);
    }

       //add modified lenderCallOnly to restrict access ONLY to lender
    function getApplicantAddress() public  view  returns(string, string, string, string, string, string) {
        return(homeAdd.street1, homeAdd.street2, homeAdd.city, homeAdd.zip, homeAdd.state, homeAdd.country);
    }
}



//============================================================================  LOAN
contract Loan {

    address public applicantContractAddress;
    string public loanType;
    int public loanAmount;
    uint public iLoanAmount;
    address public loanProgramAddress = msg.sender;
    bool public received;
    bool public goodCredit;
    bool public approved;
    event UpdatingCreditStatusFor(int ssn);
    event DisclosuresUpdated(int estimatedIntrestRate, int estimatedEMI);
    event LoanAmountTxfed(uint amount);
    int private ssn;
    int private applicantIncome;
    address private signedBy;
    int public estimatedIntrestRate;
    int public estimatedEMI;
    int public loanPeriodInYears;
    uint public lPiY;

    function getYears() pure public  {
//        return loanType;
}


    function Loan(string _name, address _applicantContract, string _type, int _amount, int _periodInYears) public {
        Applicant applicant =  Applicant(_applicantContract);
        applicant.ackApplication(_name, loanProgramAddress);
        (, , , ssn, applicantIncome, signedBy) = applicant.getApplicantDetails();
        applicantContractAddress = _applicantContract;
        loanType = _type;
        loanAmount = _amount;
        iLoanAmount = uint(_amount);
        received = true;
        loanPeriodInYears = _periodInYears;
    }

    function updateCreditStatus(bool _creditStatus) public {
        emit UpdatingCreditStatusFor(ssn);
        goodCredit = _creditStatus;
    }

    function addDisclosure(int _estimatedIntrestRate, int _estimatedEMI) public {
        estimatedIntrestRate = _estimatedIntrestRate;
        estimatedEMI = _estimatedEMI;
        emit DisclosuresUpdated(_estimatedIntrestRate, _estimatedEMI);

    }

    function approveLoan() public payable {
        if (goodCredit) {
            signedBy.transfer(msg.value);
            approved = true;
            emit LoanAmountTxfed(msg.value);
        } else {
            revert();
        }
    }
}
